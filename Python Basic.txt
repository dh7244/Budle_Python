[코드잇 프로그래밍 기초 in Python_DA20]

1. 프로그래밍 시작하기
1) 코멘트
    - # 이용해서 코멘트 표시. 코드에 영향을 주지 않음
    - 용도 : 복잡한 코드 설명, 하다가 만 부분 표시, 다른 개발자와 소통

2) 자료형 개요 (다른 프로그래밍 언어에서도 비슷하게 나타난다. 프로그래밍 공통사항)
    - 파이썬으로 프로그래밍 할 때는 여러가지 자료를 이용할 수 있다.
    - 숫자 : 정수(Integer)- 0,-1,1  /  소수(Floating Point)-1.0, 2.0
    - 문자열(String) : "Hello", "World".   ex)"Hello" + "World" = "HelloWorld"
    - 불린(Boolean) : 참과 거짓을 나타냄. 결과값은 True 혹은 False.  3 > 7 → False
    - 리스트(list), 튜플(tuple) 등도 있음

3) 추상화 개요 : 복잡한 것을 단순하게 만들어줌 (함수의 구동 원리를 몰라도 함수 이름만 알면 사용할 수 있음)
    - 프로그래밍에서 추상화는 변수(Variable), 함수(Function), 객체(Object)의 세 단계로 볼 수 있음
    - 변수(Variable) : 값을 저장하는 것
        x = 254
        y = 375
        print(x + y)
    - 함수(Function) : 명령을 저장하는 것. 예시) print 함수

4) 변수
    - 변수란? 데이터를 어떤 공간에 담아서, 이름을 붙여주는 것
    - 예시) 메뉴 가격 계산 (변수 사용 X)
        print(4990)
        print(4990 * 3 + 1490 * 2 + 1250 * 5)
    - 변수를 안쓸 때 문제점 : 매번 값을 일일히 입력해야함, 실수할 가능성 높음, 코드를 이해하기 어려움, 수정하기 어려움
    - 예시) 메뉴 가격 계산 (변수 사용)
        burger_price = 4990   # burger_price를 정의함. "="는 지정연산자. 등호 오른쪽의 값을 등호 왼쪽 변수에 지정한다.
        fries_price = 1490
        drink_price = 1250
        print(burger_price)
        print(burger_price * 3 + fries_price * 2 + drink_price * 5)

5) 실습과제 : 칼로리 계산기
    # 과자별 칼로리 변수 정의
    kitkat = 190
    oreos = 502
    pringles = 292
    twix = 135.9
    cheetos = 485

    # 다양한 과자 조합
    print(kitkat + oreos * 2)
    print(cheetos * 4)
    print(pringles + oreos + twix)
    print(pringles * 3 + oreos * 2)

6) 함수
    - 명령을 저장. 복잡한 디테일을 알 필요 없이, 어떻게 쓰는지만 알면 된다.
    - 내장함수 : 기본으로 제공되는 함수  예시)print 함수
    - 예시)
        def hello():   # 함수 정의의 첫줄 : 함수의 헤더
            print("Hello!")
            print("Welcome to Codeit!")


        hello()   # 함수 호출

7) 실습과제 : 카페모카 레시피
    def cafe_mocha_recipe():
        print(""""1. 준비된 컵에 초코 소스를 넣는다.   # 따옴표 3개를 쓰면 여러줄 문자열을 그대로 출력
    2. 에스프레소를 추출하고 잔에 부어 준다.
    3. 초코 소스와 커피를 잘 섞어 준다.
    4. 거품기로 우유 거품을 내고, 잔에 부어 준다.
    5. 생크림을 얹어 준다.""")


    cafe_mocha_recipe()

8) 파라미터
    - 함수에 넘겨주는 값
    - 파라미터에 따라 함수가 다르게 동작하게 할 수 있음
    - 예시)
        def hello(name):
            print("Hello")
            print(name)


        hello("Chris")

9) 여러 개의 파라미터
    - 한 함수에 여러 개의 파라미터를 전달하기
    - 예시)
        def print_sum(num_1, num_2, num_3):
            print(num_1 + num_2 + num_3)


        print_sum(7, 3, 2)

10) 실습과제 : 세 수의 곱
    def multiply_three_numbers(num_1, num_2, num_3):
        print(num_1 * num_2 * num_3)


    multiply_three_numbers(7, 3, 5)

11) return문
    - 함수가 어떤 값을 돌려주는 것 (함수가 값을 반환)
    - 예시)
        def get_square(x):
            return x * x


        y = get_square(3)
        print(y)


2. 프로그래밍 핵심 개념
1) 자료형 : 숫자형
    - 각 숫자형끼리의 연산 결과값의 형
        - 정수형&정수형 연산 => 정수형
        - 소수형&소수형 연산 => 소수형
        - 소수형&정수형 연산 => 소수형
        ※ 나눗셈 : 정수형&정수형 연산 시에도 결과값으로 소수형이 나온다. (버림 나눗셈은 해당 X)
    - 파이썬에서의 연산 순서는 일반적인 산수 조건을 따름(덧셈/뺄셈보다 곱셈/나눗셈이 우선)
    - 예시
        print(4 + 7)  # 덧셈
        print(2.0 - 4.0)  # 뺄셈
        print(5.0 * 3)  # 곱셈
        print(2 ** 3)  # 거듭제곱
        print(7 % 3)  # 나머지연산
        print(7 / 2)  # 나눗셈
        print(7 // 2)  # 버림 나눗셈(floor division) : 소수부분 버림
        print(round(3.141592))  # 반올림 : round 함수
        print(round(3.141592), 2)  # 소숫점 2째자리에서 반올림

2) 자료형 : 문자열(String)
    - 따옴표(''), 큰따옴표("")로 문자열 만들 수 있음
    - 문자열의 연산
        print("코드잇" + "유재석")  # 코드잇유재석
        print("3" + "5")  # 35
        print("Hello" * 3)  # HelloHelloHello
    - 문자열 안에 따옴표가 포함되는 경우
        print('I'm excited to learn Python!')  # Syntax 오류
        print("I'm excited to learn Python!")  # 큰따옴표로 바꿈
        print('I\'m excited to learn Python!')  # 역슬래시(\) 이용

3) 자료형 : 형 변환(Type Conversion or Type Casting)
    - 값을 어떤 자료형에서 다른 자료형으로 변환
    - 예시
        print(int(3.8))
        print(float(3))
        print(int("2") + int("5"))
        print(float("1.1") + float("2.5"))
        print(str(2) + str(5))
    - 예시2
        age = 7
        print("제 나이는 " + age + "살입니다.")  # 오류 : 문자형과 숫자형 연결 불가
        print("제 나이는 " + str(age) + "살입니다.")

4) 자료형 : format 이용한 문자열 formatting
    - 예시) 오늘은 2019년 10월 29일입니다. ← 출력하기
        year = 2019
        month = 10
        day = 29
        print("오늘은" + str(year) + "년" + str(month) + "월" + "str(day) + "일입니다.") → 매우 번거롭고 복잡함
        print("오늘은 {}년 {}월 {}일입니다.".format(year, month, day)) → format 활용
    - format 다루기
        # 순서바꾸기
        print("저는 {},{},{}를 좋아합니다.".format("박지성", "유재석", "빌게이츠"))
        print("저는 {1},{0},{2}를 좋아합니다.".format("박지성", "유재석", "빌게이츠"))

        # 소숫점 2번째 자리에서 반올림
        num_1 = 1
        num_2 = 3
        print("{0} 나누기 {1}은 {2}입니다.".format(num_1, num_2, num_1 / num_2))
        print("{0} 나누기 {1}은 {2:.2f}입니다.".format(num_1, num_2, num_1 / num_2))

    - format과 유사한 방식들
        가장 오래된 방식 (% 기호) : %s, %d와 같은 '포맷 스트링'을 사용. C나 자바 등 많은 언어에서 유사한 방식 사용
        name = "최지웅"
        age = 32
        print("제 이름은 %이고 %d살입니다." % (name, age))

        현재 가장 많이 쓰이는 방식 (format 메소드) : 현재 가장 많이 사용하는 방식
        name = "최지웅"
        age = 32
        print("제 이름은 {}이고 {}살입니다.".format(name, age))

        새로운 방식 (f-string) : 파이썬 3.6부터 새롭게 나온 방식.
        name = "최지웅"
        age = 32
        print(f"제 이름은 {name}이고 {age}살입니다.")

5) 자료형 : 불 대수, 불린(Boolean)
    - 불 대수 : 일상적인 논리를 수학적으로 표현한 것.
    - 불 대수에서 사용하는 값 = 진리값 (True or False)
    - 불 대수의 연산 : AND OR NOT
        - AND 연산 : x와 y가 모두 참일 때만 x AND y가 참
        - OR 연산 : x와 y 중 하나라도 참이면 x OR y는 참
        - NOT 연산 : x가 참이면 NOT x는 거짓. x가 거짓이면 NOT x는 참
    - 명제 : 참과 거짓이 확실한 문장
    - 예시
        print(2 > 1)
        print(4 <= 3)
        print(2 == 2)
        print(2 != 2)
        print("Hello" == "Hello")
        print(2 > 1 and "Hello" == "Hello")
        print(7 == 7 or (4 < 3 and 12 > 10))
    ※ type 함수 : 쓰고 있는 값이 어떤 자료형인지 확인할 수 있는 함수
        print(type(3))
        print(type("3"))
        print(type(True))

6) 추상화 : 변수/함수/return문/옵셔널 파라미터/Scope/상수/스타일
    - 변수 : 파이썬에서 등호(=)는 지정연산자(Assignment Operator)로, 오른쪽의 값을 왼쪽 변수에 지정한다는 의미
    - 함수의 실행순서 : 함수를 호출한다 = 함수는 실행한다는 의미
        def hello():
        print("Hello!")
        print("Welcome to Codeit")

        print("함수 호출 전")
        hello()
        print("함수 호출 후")
    - return문
        - return문의 역할 : 1) 값 돌려주기  2) 함수 즉시 종료하기
        - 예시
            def square(x):
            print("함수 시작")
            return x*x
            print("함수 끝")  # return문은 함수를 종료시키므로 도달 불가. dead code가 됨.
        - return문과 print문의 차이
            def print_square(x):
                print(x * x)

            def get_square(x):
                return x * x

            print_square(3)
            get_square(3)  # 출력이 되지 않음
            print(get_square(3))
            print(print_square(3))  # return값이 없으므로 None이 됨.
    - 옵셔널 파라미터(Optional parameter)
        - 파라미터에 기본값(default value)을 설정할 수 있음. 기본값을 설정해두면 함수 호출 시 파라미터에 값을 안넘겨줘도 됨.
        - 옵셔널 파라미터는 꼭 마지막에 넣어야 한다.
        - 예시
            def myself(name, age, nationality="한국"):
                print("내 이름은 {}".format(name))
                print("나이는 {}".format(age))
                print("국적은 {}".format(nationality))

            myself("코드잇", 1, "미국")
            myself("코드잇", 1)
    - Syntactic Sugar : 자주 쓰이는 표현을 더 간략하게 쓸 수 있도록 하는 문법
        x = x + 1
        x += 1

        x = x * 2
        x *= 2
    - Scope(범위)
        - 모든 변수에는 Scope라 하여, 해당 변수를 사용할 수 있는 범위가 지정된다.
        - 로컬 변수 : 변수를 정의한 함수 내에서만 사용 가능
        - 글로벌 변수 : 모든 곳에서 사용 가능
        - 함수에서 변수를 사용하고 나면, 로컬 변수를 먼저 찾고 나서, 없는 경우 글로벌 변수를 찾음
        - 예시 1)
            def my_function():
                x = 3
                print(x)


            my_function()
            print(x)   # 오류. 함수 내에서 정의한 변수 x는 로컬 변수로, 함수 내에서만 사용 가능. 변수 x의 scope는 이 함수에 한정
        - 예시 2)
            x = 2

            def my_function():
                print(x)

            my_function()   # x는 글로벌 변수로, 이 프로그램 전체에서 사용 가능
        - 예시 3)
            x = 2   # 글로벌 변수

            def my_function():
                x = 3   # 로컬 변수
                print(x)

            my_function()   # 함수 내에서 먼저 변수를 찾고 없으면 글로벌 변수를 찾기 때문에, 3이 출력됨
            print(x)   # 글로벌 변수인 2가 출력됨.
    - 상수(Constant)
        - 일반적으로 상수는 모든 문자를 대문자로 설정(일반 변수와 쉽게 구분, 실수 방지)
        - 예시 : PI = 3.14  (원주율 파이는 상수이므로 대문자로 표기)
    - 스타일
        - 이해하기 쉬운 코드를 사용해야한다.
        - 파이써에서 가장 많이 사용되는 스타일 가이드 : PEP8
        - 자주 쓰이는 몇가지 규칙
            - 이름 : 변수/함수 이름은 소문자, 상수 이름은 대문자. 여러 단어일 경우 _로 구분. 의미를 알 수 있는 이름 사용
            - 화이트 스페이스
                - 들여쓰기는 스페이스*4개
                - 함수 정의 위아래로 빈 줄 2개씩
                - 괄호 바로 안에는 띄어쓰기 X
                - 쉼표 앞에는 띄어쓰기 X
                - 지정 연산자 앞뒤로 띄어쓰기 1칸
                - 연산자 앞뒤로 띄어쓰기 1칸
                - 단, 연산 우선순위 강조 시에는 붙여쓰기
                - 일반 코드와 같은 줄에 코멘트 쓸 경우 코멘트 앞에 최소 2칸 띄어쓰기

7) 제어문
    - While 반복문의 구조/문법
        - 구조
            while 조건부분:
                실행부분
        - 조건부분 : 불린 값으로 계산되는 식
        - 실행부분 : 반복적으로 실행하고 싶은 명령. 조건 부분이 True면 실행부분이 실행된다.
        - 예시
            i = 1
            while 2 * i <= 100:
                print(i * 2)
                i += 1
    - if문 구조/문법
        - 구조
            if 조건부분:
                실행부분
            else:
                실행부분   → if의 조건부분이 False면 실행된다.
        - 예시
            temp = 16
            if temp <= 10:
                print("자켓을 입는다")
            else:
                print("자켓을 입지 않는다.")
    - elif문
        - else:
            if ~  를 대체한다.
        - 예시
            def print_grade(midterm_score, final_score):
                total = midterm_score + final_score
                if total >= 90:
                    print("A")
                elif total >= 80:
                    print("B")
                elif total >= 70:
                    print("C")
                elif total >= 60:
                    print("D")
                else:
                    print("F")
    - break문, continue문
        - break문 : while문에서 조건 부분과 상관 없이 반복문에서 나올 때 사용
        - 예시(100 이상이고 23의 배수인 최소의 정수 찾기)
            i = 100

            while True:
                if i % 23 == 0:
                    break
                i = i + 1

            print(i)
        - continue문 : 현재 진행되고 있는 수행 부분을 중단하고 바로 조건 부분을 확인
        - 예시(15 이하 짝수 출력)
            i = 0

            while i < 15:
                i = i + 1
                if i % 2 == 1:
                    continue
                print(i)


3. 프로그래밍과 데이터
1) 리스트
    -



















[코드잇 알고리즘 및 객체 지향 프로그래밍_DA25]

1. 알고리즘이란?
1) 알고리즘 : 문제를 해결하기 위한 자세한 방법
    - 좋은 알고리즘 : 1) 문제를 해결하는 것. 2) 문제를 더 잘 해결하는 것.
    - 컴퓨터 알고리즘 : 컴퓨터가 어떤 문제를 해결하기 위해서 컴퓨터가 이해할 수 있는 방법으로 정리되어 있는 해결 방식.
        컴퓨터 알고리즘은 프로그램을 통해 구현한다.
    - 대표적인 알고리즘은 알고 있는 게 좋다. BFS 알고리즘, O(n), Divide and Conquer 등.
    - 알고리즘이 개발자의 실력. 결과물(정확성, 속도 등)의 차이를 만들어낸다.
    - 예시) 팔린드롬 판별하는 함수 만들기 (팔린드롬 : 거꾸로 읽어도 똑같은 단어)
        def is_palindrome(word):
            for i in range(0, len(word)):
                if word[i] != word[-1 -i]:
                    return False
            return True

2) 하나의 문제, 여러가지 알고리즘
    - 같은 문제라도 알고리즘 따라 걸리는 시간이 다름. 여러 알고리즘 중 어떤 방법을 택할 것인가에 대한 문제.
    - 탐색 문제 : 저장된 정보 중 원하는 값을 찾는 것
        - 선형탐색 알고리즘(Linear search algorithm) : 처음부터 하나씩 쭉 탐색하여 원하는 값이 나오면 멈추는 방식
        - 이진탐색 알고리즘(Binary search algorithm) : 중간 지점의 데이터를 확인하여 절반씩 제외시켜가며 원하는 값을 찾는 방식
            이진탐색 방식을 사용하려면 반드시 데이터가 정렬되어 있어야한다.(크기순 등)
        - 예제) 선형 탐색 구현하기 (in 사용 X)
            def linear_search(element, some_list):
                i = 0
                while i < len(some_list):
                    if element == some_list[i]:
                        return i
                    i += 1
                return None
        - 예제) 이진 탐색 구현하기
            def binary_search(element, some_list):
                some_list.sort()
                start_index = 0
                end_index = len(some_list) - 1
                while start_index <= end_index:
                    midpoint = (start_index + end_index) // 2
                    if some_list[midpoint] == element:
                        return midpoint
                    elif some_list[midpoint] > element:
                        end_index = midpoint - 1
                    else:
                        start_index = midpoint + 1
                return None
        - 리스트 탐색 알고리즘 비교
            - 이진 탐색은 리스트 길이가 길어져도 최대 탐색 횟수가 아주 조금씩 늘어난다.
                - 리스트 길이 16 : 선형 16회, 이진 4회
                - 리스트 길이 32 : 선형 32회, 이진 5회
                - 리스트 길이 64 : 선형 64회, 이진 6회
                - 페이스북 유저 23억명일 때 : 최악의 경우 선형 23억회 확인 필요, 이진은 31회만 확인하면 된다.
                → 데이터가 커질수록 매우 큰 차이를 만듦
            - 단, 이진 탐색은 데이터가 정렬되어 있어야 한다.
    - 정렬(Sorting) : 리스트의 원소들을 특정 순서대로 정리하는 것. (오름차순, 내림차순, 알파벳순 등)
        - 정렬 : sorted(some_list), some_list.sord() 등 파이썬 기본 내장 함수 존재.
            다만 정렬은 알고리즘의 기초이기 때문에 정렬 알고리즘에 대해 반드시 알아야 한다.
        - 선택 정렬(Selection Sort) : 각 위치에 어떤 값이 들어갈지 찾음
            가장 작은 값을 찾아 0번에 인덱스에 놓고, 두번째로 작은 값을 찾아 1번 인덱스에 놓고...
        - 삽입 정렬(Insertion Sort) : 각 값이 어떤 자리에 들어갈지 찾음
            1번 인덱스의 값을 0번 인덱스와 비교하여 1번이 작으면 0번 인덱스를 한 칸 미룸, 2번 인덱스를 0,1번 인덱스와 비교...
        - 정렬 알고리즘 성능 비교 : https://www.toptal.com/developers/sorting-algorithms
        - 정렬은 어느상황에나 절대적으로 좋은 방법은 없으며, 상황에 따라 각 알고리즘의 장단점이 있음.
            거의 정렬된 리스트 정렬 시 삽입정렬이 가장 빠름, 무작위 리스트는 힙정렬(Heapsort),
            정반대로 정렬된 리스트는 삽입정렬이 가장 느림, 선택정렬과 합병정렬(Merge Sort)는 상황에 무관하게 소요 시간 일정

3) 알고리즘 평가법
    - 평가의 두 기준 : 시간과 공간(메모리). 빠르고 메모리를 적게 차지하는 프로그램이 좋은 프로그램.
    - 시간복잡도(Time complexity)
        - 알고리즘 평가를 위해 프로그램 구동 시간을 재는 방법은 컴퓨터 성능, 프로그래밍 언어 등 다양한 환경 따라 달라지기 때문에 불합리
        - 시간복잡도는 데이터가 많아질수록 걸리는 시간이 얼마나 급격하게 증가하는가를 나타내는 개념
            인풋 크기가 10→20→100으로 증가할 때, 알고리즘A는 걸리는 시간이 10→20→100초로, B는 10→40→1000초로 증가한다면,
             알고리즘B의 시간복잡도가 크다. 알고리즘A가 더 빠른 알고리즘.
        - 관련 수학지식
            - loga(b) : b를 a로 몇번 나누어야 1이 되는가. log2(16) : 길이가 16인 리스트를 4번 절반으로 나눠야 길이 1이 된다.
            - 1~n까지의 합 = n(n+1)/2
    - 점근표기법(Big-O Notation)
        - 알고리즘의 실행시간을 인풋 크기(n)에 대한 수식으로 나타낼 수 있음. (인풋 크기가 클수록 알고리즘 실행시간이 오래 걸림)
           단, 이 수식의 계수들은 컴퓨터 성능, 언어 등에 따라 달라지기 때문에 "점근 표기법"을 사용.
        - 인풋 크기(n)이 매우 크다고 가정하고 n의 최대 차수만 따짐. (인풋 크기가 작을 때는 알고리즘 따라 시간차가 별로 안난다.)
           알고리즘 소요시간이 n에 비례하는지, n^2에 비례하는지, lg(n)에 비례하는지
        - 읽는 방법 : O(n^2) = Big-O of n^2 알고리즘
        - 컴퓨터 성능이 좋고, 언어가 효율적이어도 알고리즘이 가장 중요하다.
        - 탐색 알고리즘 평가하기
            - 선형 탐색 : O(n)
                def linear_search(element, some_list):
                    i = 0                               ←O(1)
                    n = len(some_list)                  ←O(1)
                    while i < n:                        ←반복문:O(n)  (최악의 경우 O(1)을 n번 반복)
                        if element == some_list[i]:
                            return i
                        i += 1
                    return None
            - 이진 탐색 : O(lg(n))
                def binary_search(element, some_list):
                    start_index = 0                                ←O(1)
                    end_index = len(some_list) - 1                 ←O(1)
                    while start_index <= end_index:                ←반복문:O(lg(n)) (최악의 경우 O(1)을 lg(n)번 반복)
                        midpoint = (start_index + end_index) // 2
                        if some_list[midpoint] == element:
                            return midpoint
                        elif some_list[midpoint] > element:
                            end_index = midpoint - 1
                        else:
                            start_index = midpoint + 1
                    return None
        - n에 특별한 의미는 없음. 인풋 크기를 나타내는 흔한 문자
           리스트가 아닌 트리, 그래프 같은 인풋이 들어올 수도 있음.
           예를 들어 그래프의 경우 꼭짓점(vertex)의 갯수 V, 변(edge)의 갯수 E라 할때,
           두 꼭짓점 사이 최단 경로 찾는 BFS 알고리즘의 시간 복잡도는 O(V+E)와 같이 표현
    - 파이썬 대표적인 내장함수의 시간복잡도
        - List Operation
            (Operation : Code : Average Case)
            인덱싱 :	my_list[index] : O(1)
            정렬	: my_list.sort(), sorted(my_list) :	O(nlgn)
            뒤집기 :	my_list.reverse() :	O(n)
            탐색 : element in my_list : O(n)
            끝에 요소 추가	: my_list.append(element) : O(1)
            중간에 요소 추가 :	my_list.insert(index, element) : O(n)
            삭제	: del my_list[index] : O(n)
            최솟값, 최댓값 찾기 : min(my_list), max(my_list) : O(n)
            길이 구하기 : len(my_list) : O(1)
            슬라이싱 : my_list[a:b] : O(b - a)   (슬라이싱 범위의 길이에 비례)
        - Dictionary Operation
            (Operation : Code : Average Case)
            값 찾기 : my_dict[key] : O(1)
            값 넣어주기/덮어쓰기 : my_dict[key] = value : O(1)
            값 삭제 : del my_list[key] : O(1)
    - 일반적인 시간복잡도
        - O(1) : 반복문 없으면 대체로 O(1)
        - O(lgn) : 예시-2의 거듭제곱을 출력하는 함수
            def print_powers_of_two(n):
                i = n
                while i > 1:
                    print(i)
                    i = i / 2
        - O(n) : 일반적으로 반복문이 있고, 반복 횟수가 인풋 크기에 비례할 때
        - O(nlgn) : 반복문 2개가 중첩되었는데, 하나는 n에, 하나는 lgn에 비례할 때
        - O(n^2) : 반복문 안에 반복문이 있을 때
        - O(n^3) : 반복문 세 번 중첩
        - 그 외 : O(n^4), O(2^n), O(n!) 등
    - 공간 복잡도(Space Complexity)
        - 인풋 크기에 비례해서 알고리즘이 사용하는 메모리 공간 크기
        - 마찬가지로 Big-O 표기법을 사용할 수 있음.
        - 예시 : O(n^2)의 공간복잡도를 가지는 함수
            def largest_product(my_list):
                products = []
                for a in my_list:                   →O(1) : 정수 1개 담아둠
                    for b in my_list:               →O(1) : 정수 1개 담아둠
                        products.append(a * b)
                                                    →O(n^2) : products에 my_list의 가능한 모든 조합의 곱이 들어감
                return max(products)


2. 재귀함수
1) 재귀함수(Recursive function) 개요
    - 재귀함수 : 자기 자신을 호출하는 함수
    - 재귀적으로 문제를 푼다는 것 = 같은 형태의 더 작은 문제, 즉 부분문제(Subproblem)를 풀고, 부분문제의 답을 이용하여 원래 문제를 품
        - base case : 문제가 충분히 작아서 바로 풀 수 있는 경우
        - recursive case : 재귀적으로 부분문제를 풀어야하는 경우
        - 재귀적으로 문제를 풀 때는 recursive case 뿐 아니라 base case가 뭔지 꼭 생각해야한다.
    - 예시) 카운트다운 함수
        def countdown(n):
            if n > 0:
                print(n)
                countdown(n - 1)
        - 함수 실행 순서 : countdown(4)실행 → countdown(3)실행 → countdown(2)실행 → countdown(1)실행 → countdown(0)실행
                        → countdown(0)종료 → countdown(1)종료 → countdown(2)종료 → countdown(3)종료 → countdown(4)종료
    - 예시) 팩토리얼(Factorial) 계산 (0!=1, 1!=1, 2!=2x1, 3!=3x2x1, ...)
        def factorial(n):
            if n == 0:                               ← base case
                return 1
            return n * factorial(n - 1)              ← recursive case
    - 재귀함수 vs 반복문
        - 반복문으로 풀 수 있는 문제는 재귀적으로도 풀 수 있고, 역으로도 마찬가지.
        - Stackoverflow : 컴퓨터는 함수가 끝나면 돌아갈 위치를 기록해두는데, 이것을 Callstack이라고 함.
           재귀함수에 중첩이 너무 많이 되면 callstack이 너무 많이 쌓여 Stackoverflow 발생하여 프로그램이 멈춘다.
           파이썬에서는 치명적 오류 발생 방지 위해 callstack 1000개까지만 허용.
        - 반복문으로 쓰면 코드가 지저분하고 복잡해질 때 재귀함수를 사용. 역의 경우도 있음.

2) 재귀함수 연습
    - 예시1) 피보나치 수열 : n번째 피보나치 수열을 리턴해주는 함수
        def fib(n):
            if n <= 2:                              ← base case
                return 1
            return fib(n - 1) + fib(n - 2)          ← recursive case
        - 시간복잡도 : n=1,2(base case)의 시간복잡도는 O(1)
                     n>3(recursive case)일 때, 각 함수 호출마다 fib 함수가 2번씩 더 실행되므로, fib함수의 시간복잡도는 O(2^n)
    - 예시2) 숫자 합 : n번째 삼각수(triangle number)-자연수 1부터 n까지의 숫자 합-을 리턴해주는 함수
        def triangle_number(n):
            if n == 1:                              ← base case
                return 1
            return triangle_number(n - 1) + n       ← recursive case
        - 시간복잡도 : base case의 시간복잡도는 O(1), 재귀문을 통해 함수가 n번 호출되므로, 해당 함수의 시간복잡도는 O(n)
    - 예시3) 자릿수 합 : n의 각 자릿수 합을 리턴해주는 함수
        def sum_digits(n):
            if n < 10:
                return n
            return sum_digits(n // 10) + (n % 10)
        - 시간복잡도 : base case의 시간복잡도는 O(1), n이 10배가 되면 함수가 1회 더 호출되므로 해당 함수의 시간복잡도는 O(log10(n))
    - 예시4) 리스트 뒤집기 : 파라미터로 받은 리스트를 거꾸로 뒤집어 리턴하는 함수
        def flip(some_list):
             if len(some_list) < 2:                             ← base case
                 return some_list
             return some_list[-1:] + flip(some_list[:-1])       ← recursive case
        - 시간복잡도 : flip(some_list[:-1]의 시간복잡도가 O(n)이고, 호출마다 리스트 길이가 1씩 감소하므로 flip함수는 n번 반복됨.
                    때문에 flip함수의 시간복잡도는 O(n^2)
    - 예시5) 이진탐색 재귀로 구현해보기
        def binary_search(element, some_list, start_index=0, end_index=None):
            if end_index == None:
                end_index = len(some_list) - 1
            if start_index > end_index:
                return None
            mid = (start_index + end_index) // 2
            if some_list[mid] == element:
                return mid
            if element < some_list[mid]:
                return binary_search(element, some_list, start_index, mid - 1)
            else:
                return binary_search(element, some_list, mid + 1, end_index)
        - 시간복잡도 : 함수 호출마다 탐색범위가 절반씩 줄어들기 때문에 lg(n)
    - 예시6) 하노이의 탑 : 하노이의 탑 게임의 해답을 출력해주는 함수(파라미터 : 원판 수, 시작 기둥 번호, 목표 기둥 번호)
        def move_disk(disk_num, start_peg, end_peg):
            print("%d번 원판을 %d번 기둥에서 %d번 기둥으로 이동" % (disk_num, start_peg, end_peg))

        def hanoi(num_disks, start_peg, end_peg):
            if num_disks == 0:
                return
            else:
                other_peg = 6 - start_peg - end_peg
                hanoi(num_disks - 1, start_peg, other_peg)
                move_disk(num_disks, start_peg, end_peg)
                hanoi(num_disks - 1, other_peg, end_peg)
        - 시간복잡도 : 2^n (num_disk가 n일 때, n-1의 hanoi함수를 2번 호출)


3. 알고리즘 패러다임 : 문제 해결 위한 일반적인 접근법들
1) Brute Force : 가능한 모든 경우의 수를 다 시도해보는 방법
    - 장단점
        - 장점 : 직관적이고 명확하며, 코드 구현이 쉽고, 답을 확실히 찾을 수 있다.
        - 단점 : 일반적으로 비효율적인 방법이고, 인풋이 커질수록 더 심각해짐.
    - 효율적인 알고리즘 찾는 출발점 : 문제 해결방식을 Brute Force로 한번 생각해보고, 여기서 어떻게 효율화시킬지 구상하는 출발점이 된다.
    - 예시1) 카드 두 뭉치에서 각각 카드를 한장씩 뽑아 두 수의 곱이 가장 큰 경우 찾기
        def max_product(left_cards, right_cards):
            result = left_cards[0] * right_cards[0]
            for i in left_cards:
                for j in right_cards:
                    if i * j > result:
                        result = i * j
            return result
        - 시간복잡도 : O(mn)  m은 left_cards의 갯수, n은 right_cards의 갯수
    - 예시2) 직선거리가 가장 가까운 두 점 찾기
        # 제곱근 사용을 위한 sqrt 함수
        from math import sqrt

        # 두 매장의 직선 거리를 계산해 주는 함수
        def distance(store1, store2):
            return sqrt((store1[0] - store2[0]) ** 2 + (store1[1] - store2[1]) ** 2)

        # 가장 가까운 두 매장을 찾아주는 함수
        def closest_pair(coordinates):
            result_1 = coordinates[0]
            result_2 = coordinates[1]
            for i in coordinates:
                for j in coordinates:
                    if distance(i, j) < distance(result_1, result_2) and i != j:
                        result_1 = i
                        result_2 = j
            return [result_1, result_2]
        - 시간복잡도 : coordinates 길이 n일 때 반복문 2번 중첩되므로, O(n^2)
    - 예시3) 강남역 폭우 : 건물 높이를 인풋으로 받아 건물 사이에 빗물이 얼마나 담길 수 있는지 리턴
        def trapping_rain(buildings):
            # 총 담기는 빗물의 양을 변수에 저장
            total_height = 0

            # 리스트의 각 인덱스을 돌면서 해당 칸에 담기는 빗물의 양을 구한다
            # 0번 인덱스와 마지막 인덱스는 볼 필요 없다
            for i in range(1, len(buildings) - 1):
                # 현재 인덱스를 기준으로 양쪽에 가장 높은 건물의 위치를 구한다
                max_left = max(buildings[:i])
                max_right = max(buildings[i:])

                # 현재 인덱스에 빗물이 담길 수 있는 높이
                upper_bound = min(max_left, max_right)

                # 현재 인덱스에 담기는 빗물의 양을 계산
                # 만약 upper_bound가 현재 인덱스 건물보다 높지 않다면, 현재 인덱스에 담기는 빗물은 0
                total_height += max(0, upper_bound - buildings[i])

            return total_height
        - 시간복잡도 : O(n^2)

        # 내가 쓴 코드 (빌딩과 빗물이 점유하는 총 넓이 구해서 빌딩 넓이 빼기)
        def trapping_rain(buildings):
            max_height = max(buildings)
            building_space = sum(buildings)
            build_water_space = 0
            for i in range(1, max_height + 1):
                temp_list = []
                for j in range(0, len(buildings)):
                    if buildings[j] >= i:
                        temp_list.append(j)
                build_water_space = build_water_space + max(temp_list) - min(temp_list) + 1
            return build_water_space - building_space

2) Divide and Conquer
    - 문제를 기존 문제와 같은 형태를 가진 부분 문제로 나눠서 부분 문제의 솔루션을 이용하여 기존 문제를 푸는 방법
    - Divide and Conquer 알고리즘의 단계 : 1)Divide 2)Conquer 3)Combine
    - 재귀적 개념 필요, 문제가 충분히 작아질 때까지 문제를 충분히 나눈다.(Base Case)
    - 예시) 1~n까지 더하는 함수 (stard와 end를 인풋으로 받아 start~end까지의 합을 리턴)
        def consecutive_sum(start, end):
            # base case
            if end == start:
                return start

            # 부분 문제를 반으로 나눠주기 위해서 문제의 정중앙을 정의한다 (Divide)
            mid = (start + end) // 2

            # 각 부분 문제를 재귀적으로 풀고(Conquer), 부분 문제의 답을 서로 더한다(Combine).
            return consecutive_sum(start, mid) + consecutive_sum(mid + 1, end)
    - 합병정렬(Merge Sort) - 정렬 알고리즘
        - 합병정렬 : Divide & Conquer 알고리즘
            Divide : 리스트를 반으로 나눈다.
            Conquer : 왼쪽 리스트와 오른쪽 리스트를 각각 정렬한다.
            Combine : 정렬된 두 리스트를 하나의 정렬된 리스트로 합병한다.
                      각 리스트에서 가장 왼쪽에 있는 수끼리 계속 비교하여 작은 것을 넣는다. 마지막에 남는 수들은 그대로 넣는다.
        - 재귀적 개념으로 이해하기
            Base case : 리스트의 요소가 1개일 때. 이미 그대로 정렬되었다고 볼 수 있음.
            Recursive case : 각 리스트의 가장 왼쪽 값을 비교하여 작은 값을 택한다.
        - 예시) 합병 정렬 구현하기
            - 해답
                # merge 함수 정의 : 두 정렬된 리스트를 인풋으로 받아 정렬된 리스트로 합쳐 리턴
                def merge(list1, list2):
                    i = 0
                    j = 0
                    # 정렬된 항목들을 담을 리스트
                    merged_list = []
                    # list1과 list2를 돌면서 merged_list에 항목 정렬
                    while i < len(list1) and j < len(list2):
                        if list1[i] > list2[j]:
                            merged_list.append(list2[j])
                            j += 1
                        else:
                            merged_list.append(list1[i])
                            i += 1
                    # list2에 남은 항목이 있으면 정렬 리스트에 추가
                    if i == len(list1):
                        merged_list += list2[j:]
                    # list1에 남은 항목이 있으면 정렬 리스트에 추가
                    elif j == len(list2):
                        merged_list += list1[i:]
                    return merged_list
                # 합병 정렬 함수 정의
                def merge_sort(my_list):
                    # base case
                    if len(my_list) < 2:
                        return my_list
                    # my_list를 반씩 나눈다(divide)
                    left_half = my_list[:len(my_list)//2]    # 왼쪽 반
                    right_half = my_list[len(my_list)//2:]   # 오른쪽 반
                    # merge_sort 함수를 재귀적으로 호출하여 부분 문제 해결(conquer)하고,
                    # merge 함수로 정렬된 두 리스트를 합쳐(combine)준다
                    return merge(merge_sort(left_half), merge_sort(right_half))
            - 내가 쓴 코드
                # merge 함수 정의
                def merge(list1, list2):
                    list_merge = []
                    while True:
                        if len(list1) == 0 or len(list2) == 0:
                            break
                        elif list1[0] <= list2[0]:
                            list_merge.append(list1[0])
                            del list1[0]
                        elif list1[0] > list2[0]:
                            list_merge.append(list2[0])
                            del list2[0]
                    return list_merge + list1 + list2
                # 합병 정렬
                def merge_sort(my_list):
                    mid = len(my_list) // 2
                    left_list = my_list[:mid]
                    right_list = my_list[mid + 1:]
                    if len(my_list) <= 1:
                        return my_list
                    return merge(merge_sort(my_list[:mid]), merge_sort(my_list[mid:]))
    - 퀵 정렬(Quick Sort)
        - 퀵 정렬 : Divide & Conquer 알고리즘
            Divide : 파티션(Partition) 과정. pivot(기준값. 편의상 마지막 값)을 정하고,
                     pivot보다 작은 값은 pivot 왼쪽에, 큰 값은 pivot 오른쪽에 배치
            Conquer : pivot 왼쪽의 리스트와 pivot 오른쪽의 리스트를 각각 정렬한다.(재귀적으로)
            Combine : 할 일 없음
        - 재귀적 관점으로 검토
            Base Case : 리스트의 요소가 1개일 때.
            Recursive Case : 각 리스트에서 pivot을 정하고, pivot보다 작은 값은 왼쪽에, 큰 값은 오른쪽에 배치한다.
        - Partition 과정 : my_list, start, end를 인풋으로 받음. p(pivot) = end.
                          p보다 작은 그룹, 큰 그룹, 아직 모르는 그룹으로 나눠, 각 그룹이 시작되는 인덱스를 계속 조정한다.
                          Small 그룹 인덱스 : 0, Big 그룹 인덱스 : b, Unknown 그룹 인덱스 : i.
                          반복문에서 i += 1씩 해가며, 각 요소와 b, i의 크기를 조정. i=p가 될때, p와 b 위치의 요소를 바꾸고 함수 종료.
        - 퀵 정렬 함수 만들기
            #Divide: partition 과정을 통해, pivot을 기준으로 리스트를 나눈다.
            #Conquer: pivot 왼쪽 부분과 pivot 오른쪽 부분을 각각 quicksort 함수로 정렬한다.
            #Combine: 따로 할 게 없다!

            # 두 요소의 위치를 바꿔주는 helper function
            def swap_elements(my_list, index1, index2):
                temp = my_list[index1]
                my_list[index1] = my_list[index2]
                my_list[index2] = temp

            # 퀵 정렬에서 사용되는 partition 함수
            def partition(my_list, start, end):
                # 리스트 값 확인과 기준점 이하 값들의 위치 확인을 위한 변수 정의
                i = start
                b = start
                p = end
                # 범위안의 모든 값들을 볼 때까지 반복문을 돌린다
                while i < p:
                    # i 인덱스의 값이 기준점보다 작으면 i와 b 인덱스에 있는 값들을 교환하고 b를 1 증가 시킨다
                    if my_list[i] <= my_list[p]:
                        swap_elements(my_list, i, b)
                        b += 1
                    i += 1
                # b와 기준점인 p 인덱스에 있는 값들을 바꿔준다
                swap_elements(my_list, b, p)
                p = b
                # pivot의 최종 인덱스를 리턴해 준다
                return p

            # 퀵 정렬 : 새로운 리스트를 따로 리턴해주는게 아니고, quicksort 함수로 정렬만 하는 것.
            def quicksort(my_list, start=0, end=None):
                if end == None:
                    end = len(my_list) - 1
                # base case
                if end - start < 1:
                    return
                # my_list를 두 부분으로 나누어주고, partition 이후 pivot의 인덱스를 리턴받는다
                pivot = partition(my_list, start, end)
                # pivot의 왼쪽 부분 정렬
                quicksort(my_list, start, pivot - 1)
                # pivot의 오른쪽 부분 정렬
                quicksort(my_list, pivot + 1, end)

3) Dynamic Programming
    - Dynamic Programming의 조건 : 1) 최적 부분 구조(Optimal Substructure)  2) 중복되는 부분 문제(Overlapping Subproblems)
        - 최적 부분 구조(Optimal Substructure)가 있다는 건, 부분 문제들의 최적의 답을 이용하여 기존 문제의 최적의 답을 구할 수 있다는 것.
            - 예시) 피보나치 수열 : fib(5)의 최적의 답은 부문 문제인 fib(4)와 fib(3)의 최적의 답을 이용하여 구할 수 있다.
        - 중복되는 부분 문제(Overlapping Subproblems) : 부문 문제들로 나눴을 때 부분 문제들끼리 중복되는 경우
            - 피보나치 수열 : fib(5)=fib(4)+fib(3)이고, fib(4)를 풀 때 또 fib(3)을 풀어야함. 즉, fib(3)이 2번 중복 된다.
        - Dynamic Programming은 최적 부분 구조가 있고, 부분 문제들이 중복될 때, 같은 문제를 여러번 푸는 비효율을 해결할 수 있다.
    - Dynamic Programming의 구현하는 방법 : 1) Memoization  2) Tabulation
        - Memoization : 중복되는 계산값은 cache에 메모해두었다가 재활용.
                        최상단부터 생각하는 Top-down Approach. 위에서부터 필요한 값을 요구하므로 필요 없는 계산은 하지 않는 장점.
                        보통 재귀함수를 사용, 재귀함수와 마찬가지로 함수 호출 너무 많이 중복되면 콜스택 오류 발생
            - 예시) Memoization 이용하여 n번째 피보나치수를 리턴하는 함수 작성
                def fib_memo(n, cache):
                    # base case
                    if n < 3:
                        return 1
                    # 이미 n번째 피보나치를 계산했으면 저장된 값을 바로 리턴한다
                    if n in cache:
                        return cache[n]
                    # 아직 n번째 피보나치 수를 계산하지 않았으면 계산을 한 후 cache에 저장
                    cache[n] = fib_memo(n - 1, cache) + fib_memo(n - 2, cache)
                    # 계산한 값을 리턴한다
                    return cache[n]

                def fib(n):
                    # n번째 피보나치 수를 담는 사전
                    fib_cache = {}
                    return fib_memo(n, fib_cache)
        - Tabulation : 보통 반복문 사용하여 리스트를 채워나가는 방식. Table(표) 방식으로 처음부터 채워나가는 느낌.
                       Bottom-up Approach. 처음부터 모든 값을 계산하므로, 중간에 필요 없는 값까지 계산할 수도 있다.
                       다만 모든 부분문제를 계산해야하는 경우는 Tabulation이 더 유리(재귀함수 호출X, 리스트/array 통한 구현으로 연산 빠름)
            - 예시) Tabulation 이용하여 n번째 피보나치수를 리턴하는 함수 작성
                def fib_tab(n):
                    # 이미 계산된 피보나치 수를 담는 리스트
                    fib_table = [0, 1, 1]
                    # n번째 피보나치 수까지 리스트를 하나씩 채워 나간다
                    for i in range(3, n + 1):
                        fib_table.append(fib_table[i - 1] + fib_table[i - 2])
                    # 피보나치 n번째 수를 리턴한다
                    return fib_table[n]




